Notes:A


9-21-16

Aim: Try not to hurtyourself, the point is sharp

More pointer fun:
-Pointer arithmatic: Declaring a pointer as a specific type allows you to add
 and subtract to the pointer by the size of its associated type
 long *lp;
 int *ip;
 ip++;	//add 4 to ip
 lp++;	//add 8 to lp

--Note: Only works with + and - operators. It accesses the value at the memory
  location stored in a pointer
--Array variables are immutable pointers

Dereference:
* is also 


9-22-16

Aim: How to write functioning code

Do Now: write a function and call it in main [9-22.c]

implicit declaration: warning or error
-occurs when you do not declare the

Writing functions:
All c functions are 'pass by value'
    A parameter is a copy of the variable passed into
    the function. The original varibale is not touched.
    A copy is made (memory) for only while the function exists.

Generally, when a variable is passed thorugh a function,
it is not to modify the variable.
A pointer is passed through, and you can dereference the pointer
and modify the dereferenced variable.

Function Headers:
	 <return type> <name> (<parameters>)
-You must declare a function before you use it!! This can be done
in a few ways:
   1. Write the entire function at the top of your code, making sure
   to keep the order correct
   2. Write the function headers at the top of your code, and then provide
   the full definition later
   3. Put all the function headers in a separate file (ending in .h).
   Then include that file in your .c file and provide the definitions there

C strings (cstring)
  Strings are character arrays that end with a null character
  (either ' ' or ) or '\0').


9-23-16
Aim: Time to stop stringing you along

DN: create a character array of reasonable size. Print it out
using %s

C strings (cstrings)
  -Strings are character arrays that end with a null character
  (either '' or 0 or '\0').
  -The terminating null character is a convention, string functions will
  not work correctly with it

  -When you do not fill up a char array completely, you may
  end up with gibberish, due to previous memory
  -Since chars are numbers, you can place numbers (ASCII)
  there instead

  -When you create a literal string using "", an immutable
  string is created in memory, so if you create the same
  string literal again, the computer does not not need to
  allocate more memory. These strings are always null
  terminated.
  
The following are valid ways to declare strings:
    char s[256]:
    	 Normal array declaration, allocated 256 bytes,
	 nothing is set automatically
    char s[256] = "Imagine";
    	 Allocated 256 bytes. Creates the immutable string
	 "Imagine and then copies it (including the
	 terminating null) into the array
    char s[] = "Tuesday";
    	 Allocated 8 bytes. Creates the immutable string
	 "Tuesday" and then copies it (including the
	 terminating null) into the array
    char *s = "Mankind";
    	 Creates the immutable string "Mankind" and
	 returns a pointer to that string. Since the
	 pointer is to an immutable piece of memory,
	 you CANNOT modify strings created in this

You can only assign strings with = at declaration!!
    char s[] = 'zero'; //okay
    s = "seven"; not okay

When reassigning a string value, you should overwrite
  the values

Assignment: Write a function to modify String values

9-26
Aim: A String of functions

DN: Write a unction that returns the length of a string,
  assuming it is null terminated

System library: string.h

0: strcpy/strncpy
   -copies the contents of one string array into another
   -returns:
   
1: strcat/strncat:
  concatenates strings
  appends a copy of s2 to s1 and adds a terminating null
  you have to guarantee that it has enough space (replaces
    terminating null
  strcat: null terminated strings that have enough space
  strncat: terminate at null or at the soecificed length
  returns: concatenated string
2: strcmp/strncmp
  compares the lengths of two strings
  -number: s1 < s2
  0number: s1 = s2
  +number: s1 > s2
  
3: strchr/strnchr
  compares


9-27
Aim: 

con't from 9-26


9-28
Aim:

For assignment:
  Use regular and at least one n version
  Test the versions!


9-29
Aim: Make it so

Make:
  Create compiling instructions and setup dependencies
  Standard file name is makefile
  Syntax:
    <TARGET>: <DEPENDENCIES>
    ~TAB~<RULES>
  Example:
    strtest: stringy.c -o strtest
         gcc stringy.c
    clean:
	rm *~
    run: strtest
    	 ./stringy

To rename an a.out file:
  gcc <file>.c -o <new_name>

9-30:
Aim: 
